# Dies ist die PyPerfScore-Sprachdatei für Deutsch - Deutschland (de_DE)
# Wenn Sie die Syntax nicht verstehen, ändern Sie bitte nichts in dieser Datei!
# 
# Diese Datei wurde erstellt von Christian Lampe <kontakt@lampe2020.de>
{
    "ppsver": "0.3.4",
    "ppsver_warning": "Die Version von PyPerfScore, für die die importierte Sprachdatei gemacht ist ({}), stimmt nicht mit der von Ihnen genutzten Programmversion überein ({}). Wenn PyPerfScore unerwartet abstürzt oder irgendeinen Unsinn anzeigt, könnte dies das Problem sein.",
    "language": "de_DE",
    "language_string": "Deutsch - Deutschland",
    0: """Sprache "{}" ({}) erfolgreich importiert!""",
    1: """Sie nutzen PyPerfScore {}. Um auf neue Versionen zu überprüfen, schauen Sie bei "https://github.com/Stehlampe2020/PyPerfScore" nach.""",
    2: "Konnte die eigene Version nicht feststellen, setze Version auf 0.0.0...",
    3: { # Für die debug()-Klasse:
        0: "Die Minishell wurde mit einem ungültigen Argument für advanced_minishell aufgerufen: {} ({})",
        1: """
    PyPerfScore {}Debug-Eingabeaufforderung help() (Hilfefunktion):
    Diese Eingabeaufforderung ist nur für Debugzwecke.
    Sie hat keinen Befehlsverlauf (ich habe nicht vor, einen hinzuzufügen) und die Fähigkeit, mehrzeilige Ausdrücke zu interpretieren.
    Letzteres sollte von der Funktion exists(<string>) überflüssig gemacht werden, die
    → True zurückgibt, wenn ein Objekt mit dem Namen <string> existiert und
    → False zurückgibt, wenn kein Objekt mit dem Namen <string> existiert.
    {}""",
        2: "erweiterte ",
        3: """
    Die erweiterte Debug-Eingabeaufforderung hat die Fähigkeit, Schlüsselwörter zu interpretieren aber zeigt die Rückgabewerte nicht automatisch an (nutzen Sie dafür `print()`).
    """,
        4: """
    Schlüsselwörter funktionieren in dieser Debug-Eingabeaufforderung nicht. Nutzen Sie dafür die erweiterte Debug-Eingabeaufforderung.
    Diese können Sie starten mit `debug.minishell("switching_shells", True)`.
    """,
        5: "Hmmm... Irgendetwas ist schiefgelaufen (Details siehe Ausgabe oben). Zum Glück konnte PyPerfScore die Debug-Eingabeaufforderung nach dem Fehler noch aufrufen:",
        6: "PyPerfScore wurde unterbrochen (z.B. durch einen KeyboardInterrupt). Hier ist eine einfache Eingabeaufforderung um alles zu inspizieren:",
        7: "PyPerfScore ist fertiggelaufen. Hier ist eine einfache Eingabeaufforderung um alles zu inspizieren:",
        8: "\nSie können mit `exit()` zu der vorherigen Eingabeaufforderung zurückkehren.\nHier ist die neue Eingabeaufforderung:",
        9: "Kein `fail_status` übergeben an `debug.minishell()`!\n\nNaja, wie auch immer. Hier ist die Debug-Eingabeaufforderung:",
        10: "Ungültiger `fail_status` übergeben an `debug.minishell()`:\n{}\n{}\n\nNaja, wie auch immer. Hier ist die Debug-Eingabeaufforderung:",
        11: """Mehrzeilige Ausdrücke (wie try...except...finally) und Befehlsverlauf funktionieren in dieser Eingabeaufforderung nicht.
Geben Sie "exit()" ein, um die Debug-Eingabeaufforderung zu verlassen, "help()" um weitere Informationen zu erhalten.""",
        12: "Debug-Eingabeaufforderung wird verlassen...",
        13: "\nEin {} wurde erhoben.\n{}",
        14: "Die Debug-Eingabeaufforderung wird sich öffnen aber sofort wieder schließen."
    },
    4: { # multiprocessing-spezifischer text:
        0: "multithreading: noch nicht implementiert!",
        1: "Weil Sie kein Argument angegeben haben, das festlegt, ob der Test im Einzel- oder Mehrkernmodus gestartet werden soll, wird der Standard geladen.",
        2: "Der Mehrkernmodus existiert noch nicht. Wechseln zum Einzelkernmodus..."
    },
    5: { # Für die Argumentauslesung:
        0: "Keine Argumente erkannt, wird im Standardmodus ausgeführt...",
        1: "Sie haben keine Argumente außer --debug angegeben, wird im Standardmodus mit anschließender Eingabeaufforderung ausgeführt...",
        2: "{}: unbekanntes Argument! Ignoriere es..."
    },
    6: { # Für den Test selbst:
        0: "Test wird ausgeführt",
        1: "Ihr Rechner brauchte {} Sekunden, um so schnell wie möglich von null zu {} hochzuzählen.",
        2: "Also beträgt der Punktestand {} Punkte."
    },
    7: { # Der Text der graphischen Oberfläche:
        0: "Graphische Oberfläche wird gestartet...",
        1: {
            0: "Warnung: tkinter konnte nicht importiert werden! Stellen Sie sicher, dieses Modul korrekt zu installieren, andernfalls kann PyPerfScore nur im Kommandozeilenmodus (pyperfscore --cmdline) ausgeführt werden.",
            1: "tkinter fehlt!",
        },
        2: "Die graphische Oberfläche ist noch nicht implementiert!",
        3: "PyPerfScoreGUI ist nicht implementiert!",
        4: "Hinweis: Die graphische Oberfläche ist noch nicht implementiert. Ich werde daran arbeiten wenn der Kommandozeilenmodus (pyperfscore --cmdline) anständig und vollständig funktioniert."
    },
    8: { # Für Fehlerbehandlung:
        0: """Ihr Rechner scheint für eine Zielzahl von {} zu schnell zu sein (Testdauer < 1ms). Möglicherweise hilft ein Erhöhen der Zahl "cycles"?""",
        1: "Ein oder mehrere Module konnten nicht implementiert werden, der folgende Text ist das technische gebrabbel zu dem Fehler:",
        2: "Ein KeyboardInterrupt wurde erhoben.",
        3: "Ein sofortiger Stopp PyPerfScores wurde angefordert (ein SystemExit wurde erhoben) mit dem folgenden Fehlertext: {}",
        4: "Ein unerwarteter Fehler trat auf, der folgende Text ist das technische gebrabbel zu dem Fehler:"
    },
    9: "Verlasse PyPerfScore...",
    10: { # Für den Aktualisierungsskript:
        "dl_types": {
            0: "der Überprüfung auf eine neue Version",
            1: "des Herunterladens der neuesten Aktualisierung"
        },
        "conn_error": "Ein Netzwerkfehler trat auf während {}. Fehlertext: {}",
        0: "Sie müssen PyPerfScore nach der Aktualisierung neustarten!",
        1: "Aktualisierung im Netz verfügbar! ({ver_old} → {ver_new}) Installiere...",
        2: "Sie scheinen die neueste Version zu nutzen!",
        3: "Herunterladen... - {}% - {}",
        4: "Fertig!"
    },
    11: "Versuchen Sie nicht, ein `debug`-Objekt zu erstellen, diese Klasse existiert nur, um die Debugfunktionen zu gruppieren!"
}
